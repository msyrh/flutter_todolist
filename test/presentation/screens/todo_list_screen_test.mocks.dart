// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_todolist/test/presentation/screens/todo_list_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;
import 'dart:ui' as _i16;

import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/material.dart' as _i3;
import 'package:flutter_todolist/domain/entities/todo.dart' as _i2;
import 'package:flutter_todolist/domain/repositories/todo_repository.dart'
    as _i5;
import 'package:flutter_todolist/domain/use_cases/add_todo.dart' as _i7;
import 'package:flutter_todolist/domain/use_cases/delete_todo.dart' as _i9;
import 'package:flutter_todolist/domain/use_cases/get_todos.dart' as _i6;
import 'package:flutter_todolist/domain/use_cases/update_todo.dart' as _i8;
import 'package:flutter_todolist/presentation/controllers/todo_controller.dart'
    as _i13;
import 'package:flutter_todolist/presentation/widgets/todo_tile.dart' as _i11;
import 'package:get/get.dart' as _i10;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;

import 'todo_list_screen_test.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTodo_0 extends _i1.Fake implements _i2.Todo {}

class _FakeWidget_1 extends _i1.Fake implements _i3.Widget {
  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatelessElement_2 extends _i1.Fake implements _i3.StatelessElement {
  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_3 extends _i1.Fake implements _i3.DiagnosticsNode {
  @override
  String toString(
          {_i4.TextTreeConfiguration? parentConfiguration,
          _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeTodoRepository_4 extends _i1.Fake implements _i5.TodoRepository {}

class _FakeGetTodos_5 extends _i1.Fake implements _i6.GetTodos {}

class _FakeAddTodo_6 extends _i1.Fake implements _i7.AddTodo {}

class _FakeUpdateTodo_7 extends _i1.Fake implements _i8.UpdateTodo {}

class _FakeDeleteTodo_8 extends _i1.Fake implements _i9.DeleteTodo {}

class _FakeRxList_9<E> extends _i1.Fake implements _i10.RxList<E> {}

/// A class which mocks [TodoTile].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoTile extends _i1.Mock implements _i11.TodoTile {
  MockTodoTile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Todo get todo =>
      (super.noSuchMethod(Invocation.getter(#todo), returnValue: _FakeTodo_0())
          as _i2.Todo);
  @override
  _i3.Widget build(_i3.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget_1()) as _i3.Widget);
  @override
  _i3.StatelessElement createElement() =>
      (super.noSuchMethod(Invocation.method(#createElement, []),
          returnValue: _FakeStatelessElement_2()) as _i3.StatelessElement);
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toStringShallow(
          {String? joiner = r', ',
          _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toStringShallow, [], {#joiner: joiner, #minLevel: minLevel}),
          returnValue: '') as String);
  @override
  String toStringDeep(
          {String? prefixLineOne = r'',
          String? prefixOtherLines,
          _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(#toStringDeep, [], {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel
          }),
          returnValue: '') as String);
  @override
  _i3.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i4.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode_3()) as _i3.DiagnosticsNode);
  @override
  List<_i3.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(Invocation.method(#debugDescribeChildren, []),
          returnValue: <_i3.DiagnosticsNode>[]) as List<_i3.DiagnosticsNode>);
  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [GetTodos].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTodos extends _i1.Mock implements _i6.GetTodos {
  MockGetTodos() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TodoRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTodoRepository_4()) as _i5.TodoRepository);
  @override
  _i12.Future<List<_i2.Todo>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue: Future<List<_i2.Todo>>.value(<_i2.Todo>[]))
          as _i12.Future<List<_i2.Todo>>);
}

/// A class which mocks [AddTodo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTodo extends _i1.Mock implements _i7.AddTodo {
  MockAddTodo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TodoRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTodoRepository_4()) as _i5.TodoRepository);
  @override
  _i12.Future<void> call(_i2.Todo? todo) => (super.noSuchMethod(
      Invocation.method(#call, [todo]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
}

/// A class which mocks [UpdateTodo].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTodo extends _i1.Mock implements _i8.UpdateTodo {
  MockUpdateTodo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TodoRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTodoRepository_4()) as _i5.TodoRepository);
  @override
  _i12.Future<void> call(_i2.Todo? todo) => (super.noSuchMethod(
      Invocation.method(#call, [todo]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
}

/// A class which mocks [DeleteTodo].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTodo extends _i1.Mock implements _i9.DeleteTodo {
  MockDeleteTodo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TodoRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTodoRepository_4()) as _i5.TodoRepository);
  @override
  _i12.Future<void> call(String? id) => (super.noSuchMethod(
      Invocation.method(#call, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
}

/// A class which mocks [TodoController].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoController extends _i1.Mock implements _i13.TodoController {
  MockTodoController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetTodos get getTodosUseCase =>
      (super.noSuchMethod(Invocation.getter(#getTodosUseCase),
          returnValue: _FakeGetTodos_5()) as _i6.GetTodos);
  @override
  _i7.AddTodo get addTodoUseCase =>
      (super.noSuchMethod(Invocation.getter(#addTodoUseCase),
          returnValue: _FakeAddTodo_6()) as _i7.AddTodo);
  @override
  _i8.UpdateTodo get updateTodoUseCase =>
      (super.noSuchMethod(Invocation.getter(#updateTodoUseCase),
          returnValue: _FakeUpdateTodo_7()) as _i8.UpdateTodo);
  @override
  _i9.DeleteTodo get deleteTodoUseCase =>
      (super.noSuchMethod(Invocation.getter(#deleteTodoUseCase),
          returnValue: _FakeDeleteTodo_8()) as _i9.DeleteTodo);
  @override
  _i10.RxList<_i2.Todo> get todos =>
      (super.noSuchMethod(Invocation.getter(#todos),
          returnValue: _FakeRxList_9<_i2.Todo>()) as _i10.RxList<_i2.Todo>);
  @override
  set todos(_i10.RxList<_i2.Todo>? _todos) =>
      super.noSuchMethod(Invocation.setter(#todos, _todos),
          returnValueForMissingStub: null);
  @override
  _i10.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(Invocation.getter(#onStart),
              returnValue: _i14.mockControllerCallback())
          as _i10.InternalFinalCallback<void>);
  @override
  _i10.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(Invocation.getter(#onDelete),
              returnValue: _i14.mockControllerCallback())
          as _i10.InternalFinalCallback<void>);
  @override
  bool get initialized =>
      (super.noSuchMethod(Invocation.getter(#initialized), returnValue: false)
          as bool);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  int get listeners =>
      (super.noSuchMethod(Invocation.getter(#listeners), returnValue: 0)
          as int);
  @override
  void onInit() => super.noSuchMethod(Invocation.method(#onInit, []),
      returnValueForMissingStub: null);
  @override
  void fetchTodos() => super.noSuchMethod(Invocation.method(#fetchTodos, []),
      returnValueForMissingStub: null);
  @override
  void addTodo(String? title) =>
      super.noSuchMethod(Invocation.method(#addTodo, [title]),
          returnValueForMissingStub: null);
  @override
  void updateTodo(_i2.Todo? todo) =>
      super.noSuchMethod(Invocation.method(#updateTodo, [todo]),
          returnValueForMissingStub: null);
  @override
  void deleteTodo(String? id) =>
      super.noSuchMethod(Invocation.method(#deleteTodo, [id]),
          returnValueForMissingStub: null);
  @override
  void update([List<Object>? ids, bool? condition = true]) =>
      super.noSuchMethod(Invocation.method(#update, [ids, condition]),
          returnValueForMissingStub: null);
  @override
  void onReady() => super.noSuchMethod(Invocation.method(#onReady, []),
      returnValueForMissingStub: null);
  @override
  void onClose() => super.noSuchMethod(Invocation.method(#onClose, []),
      returnValueForMissingStub: null);
  @override
  void $configureLifeCycle() =>
      super.noSuchMethod(Invocation.method(#$configureLifeCycle, []),
          returnValueForMissingStub: null);
  @override
  _i15.Disposer addListener(_i15.GetStateUpdate? listener) =>
      (super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValue: () {}) as _i15.Disposer);
  @override
  void removeListener(_i16.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void refresh() => super.noSuchMethod(Invocation.method(#refresh, []),
      returnValueForMissingStub: null);
  @override
  void refreshGroup(Object? id) =>
      super.noSuchMethod(Invocation.method(#refreshGroup, [id]),
          returnValueForMissingStub: null);
  @override
  void notifyChildrens() =>
      super.noSuchMethod(Invocation.method(#notifyChildrens, []),
          returnValueForMissingStub: null);
  @override
  void removeListenerId(Object? id, _i16.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListenerId, [id, listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i15.Disposer addListenerId(Object? key, _i15.GetStateUpdate? listener) =>
      (super.noSuchMethod(Invocation.method(#addListenerId, [key, listener]),
          returnValue: () {}) as _i15.Disposer);
  @override
  void disposeId(Object? id) =>
      super.noSuchMethod(Invocation.method(#disposeId, [id]),
          returnValueForMissingStub: null);
}
